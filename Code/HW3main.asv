clc, clear

close all

[rcm, Itotal_b, Itotal_p, A_ptob] = aquaMassProps();

%% Axis Symmetric

I_sim = Itotal_p;

I_sim(2,2) = I_sim(1,1);


om0_deg = [-7, 2, 5].';
om0 = deg2rad(om0_deg);
Tfinal = 300;
axesFlag = 0;
M = timeseries(zeros([3 2]), [0 Tfinal]);
simIn = Simulink.SimulationInput('eulerPropagate');
simIn.ExternalInput = M;

load_system("eulerPropagate")
% open_system("eulerPropagate")

simOut = sim(simIn);

om_p = squeeze(simOut.om_p);
t = simOut.t;

om_sim = om_p;

Ix = I_sim(1,1); Iy = Ix;
Iz = I_sim(3,3);

lambda = (Iz - Ix)/Iy * om0(3);
om_al = zeros(size(om_sim));

om_al(3,:) = om0(3).*ones(size(om_al(3,:)));
om_al(1,:) = om0(1).*cos(lambda.*t) - om0(2).*sin(lambda.*t);
om_al(2,:) = om0(1).*sin(lambda.*t) + om0(2).*cos(lambda.*t);

error = om_al - om_sim;


figure()
subplot(2,1,1)
splot = plot(t, om_sim, 'LineWidth',2);
set(splot, {'DisplayName'}, {'\omega_x';'\omega_y'; '\omega_z'})
ax = gca();
ax.FontSize = 14;
% xlabel('t [sec]')
ylabel('\omega_{sim} [rad/s]')
subplot(2,1,2)
aplot = plot(t, om_al, 'LineWidth', 2);
set(aplot, {'DisplayName'}, {'\omega_x';'\omega_y'; '\omega_z'})
ax = gca();
ax.FontSize = 14;
xlabel('t [sec]')
ylabel('\omega_{analytical} [rad/s]')
legend
exportgraphics(gcf, '../Images/sim_vs_anlt_magnitude.png')


figure()
aplot = plot(t, error, 'LineWidth',2);
set(aplot, {'DisplayName'}, {'r_x';'r_y'; 'r_z'})
ax = gca();
ax.FontSize = 14;
xlabel('t [sec]')
ylabel('Error [rad/s]')
legend
exportgraphics(gcf, '../Images/sim_vs_anlt_error.png')

L_as = I_sim * simOut.om{1}.Values.Data(:,:);
L_as_mag = vecnorm(L_as,2,1);
L_as = L_as./vecnorm(L_as,2,1)%  .* vecnorm(simOut.om{1}.Values.Data(:,:), 2, 1);
figure()
hold on
plot3(simOut.om{1}.Values.Data(1,:), simOut.om{1}.Values.Data(2,:), simOut.om{1}.Values.Data(3,:))
plot3(L_as(1, :), L_as(2, :), L_as(3, :))
exportgraphics(gcf, '../Images/axis_symmetric_polhode.png')
%% Asymmetric

I_sim = Itotal_p;


q0 = [1 0 0 0].';
u0 = [0.1 0.1 0.1].';

simIn = Simulink.SimulationInput('aquaMasterModel');
simIn.ExternalInput = M;

legendNames = {{'\phi', '\theta', '\psi'}, {'q_0', 'q_1', 'q_2', 'q_3'}};
stateNames = {'u', 'q'};
unitNames = {'[rad]', ''};
imageNames = {'EA.png', 'quat.png'};

for Type = 1:2
    
    load_system("aquaMasterModel")
    % open_system("eulerPropagate")
    
    simOut = sim(simIn);
    
    R = simOut.yout{1}.Values.Data;
    t = simOut.t;
    
    n = size(t,1);
    
    om_p = squeeze(simOut.om_p).';
    om_i = zeros(size(om_p.'));
    L_i = zeros(size(om_i));
    coords_p = zeros(size(R));
    coords_b = zeros(size(coords_p));
    
    for i=1:n
        om_i(:,i) = R(:,:,i).' * om_p(i,:).';
        L_p = Itotal_p * om_p(i,:).';
        L_i(:,i) = R(:,:,i).' * L_p;

        coords_p(:,:,i) = R(:,:,i).';
        coords_b(:,:,i) = coords_p(:,:,i) * A_ptob.';
    end

    eval([stateNames{Type}, '= squeeze(simOut.', stateNames{Type}, ');'])
    % Genrates time history of attitude parameters
    figure
    eval(['plot(t, ', stateNames{Type}, ', ''LineWidth'', 2)'])
    ax = gca();
    ax.FontSize = 14;
    xlabel('t [sec]')
    ylabel([stateNames{Type}, ' ', unitNames{Type}])
    legend(legendNames{Type})
    exportgraphics(gcf, ['../Images/time_history_', imageNames{Type}])
    
    % Generate herpolhode plot (ineretial frame polhode)
    figure
    plot3(om_i(1,:), om_i(2,:), om_i(3,:), 'LineWidth', 2)
    hold on
    L_scaled = (L_i(:,end)./norm(L_i(:,end))).*norm(om_i(:,end));
    quiver3(0,0,0,L_scaled(1), L_scaled(2), L_scaled(3))
    ax = gca();
    ax.FontSize = 14;
    axis equal
    xlabel('\omega_x')
    ylabel('\omega_y')
    zlabel('\omega_z')
    % hold off
    exportgraphics(gcf, ['../Images/herpolhode_', imageNames{Type}])
    viewVec1 = cross(om_i(:,end), L_scaled);
    view(viewVec1)
    exportgraphics(gcf, ['../Images/herpolhode_normal_', imageNames{Type}])

    % Generate angular momentum vector plot (inertial)
    figure
    plot3(L_i(1,:), L_i(2,:), L_i(3,:), 'LineWidth', 2)
    ax = gca();
    ax.FontSize = 14;
    xlabel('L_x')
    ylabel('L_y')
    zlabel('L_z')
    axis equal
    exportgraphics(gcf, ['../Images/angular_momentum_', imageNames{Type}])

    % figure
    % axis equal
    % ax = gca();
    % ax.FontSize = 14;
    % xlabel('L_x')
    % ylabel('L_y')
    % zlabel('L_z')
    L_mean = mean(L_i, 2)
    % quiver3(0,0,0, L_mean(1), L_mean(2), L_mean(3))
    % exportgraphics(gcf, ['../Images/angular_momentum_mean_', imageNames{Type}])

    % Generate reference frame plot in motion
    
    figure
    axis equal
    xlim([-1.5 1.5])
    ylim([-1.5 1.5])
    zlim([-1.5 1.5])
    xlabel('x')
    ylabel('y')
    zlabel('z')
    ax = gca();
    ax.FontSize = 14;
    view([1 1 1])
    hold on
    quiver3(0,0,0,1,0,0, 'Color', 'k', 'DisplayName', 'Ineretial Frame')
    quiver3(0,0,0,0,1,0, 'Color', 'k', 'HandleVisibility', 'off')
    quiver3(0,0,0,0,0,1, 'Color', 'k', 'HandleVisibility', 'off')
    
    axNames_p = {'xp', 'yp', 'zp'};
    axNames_b = {'xb', 'yb', 'zb'};
    dataNames = {'UData', 'VData', 'WData'};
    for j=1:3
        eval([axNames_p{j}, ' = quiver3(0,0,0,coords_p(1,j,1), coords_p(2,j,1), coords_p(3,j,1), ''Color'', ''b'');'])
        eval([axNames_b{j}, ' = quiver3(0,0,0,coords_b(1,j,1), coords_b(2,j,1), coords_b(3,j,1), ''Color'', ''g'');'])
    end
    
    xp.DisplayName = 'Principal Frame';
    yp.HandleVisibility = 'off';
    zp.HandleVisibility = 'off';
    xb.DisplayName = 'Body Frame';
    yb.HandleVisibility = 'off';
    zb.HandleVisibility = 'off';

    legend

    for i=1:n
        hold on
        for j=1:3
            for k=1:3
                eval([axNames_p{j}, '.', dataNames{k}, ' = coords_p(k,j,i);'])
                eval([axNames_b{j}, '.', dataNames{k}, ' = coords_b(k,j,i);'])
            end
        end
        
        if i < n
            pause(0.001)
        end
        
        hold off
    end
    % exportgraphics(gcf, ['../Images/reference_frame_motion_', imageNames{Type}])
end
